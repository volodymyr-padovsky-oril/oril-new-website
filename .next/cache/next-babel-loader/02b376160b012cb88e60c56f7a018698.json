{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport \"./index.scss\";\nimport { connect } from 'react-redux';\nimport { sendGetInTouchMessageRequest } from '../../actions/message';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleInputChange\", state => {\n      const formErrors = {\n        name: '',\n        email: '',\n        message: ''\n      };\n      this.setState(_objectSpread({}, state, {\n        formErrors\n      }));\n      this.removeErrorClasses();\n    });\n\n    _defineProperty(this, \"validateName\", name => {\n      let nameValid = name.length > 0;\n\n      let formErrors = _objectSpread({}, this.state.formErrors);\n\n      formErrors.name = nameValid ? null : 'Name is required';\n      return new _Promise(resolve => {\n        this.setState({\n          nameValid,\n          formErrors\n        }, () => {\n          resolve();\n        });\n      });\n    });\n\n    _defineProperty(this, \"validateEmail\", email => {\n      let emailValid = email.length > 0;\n\n      const formErrors = _objectSpread({}, this.state.formErrors);\n\n      formErrors.email = emailValid ? null : 'Email is required';\n\n      if (!emailValid) {\n        return new _Promise(resolve => {\n          this.setState({\n            emailValid,\n            formErrors\n          }, () => {\n            resolve();\n          });\n        });\n      }\n\n      emailValid = email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n      formErrors.email = emailValid ? null : 'Email is invalid';\n      return new _Promise(resolve => {\n        this.setState({\n          emailValid,\n          formErrors\n        }, () => {\n          resolve();\n        });\n      });\n    });\n\n    _defineProperty(this, \"validateMessage\", message => {\n      const messageValid = message.length > 0;\n\n      const formErrors = _objectSpread({}, this.state.formErrors);\n\n      formErrors.message = messageValid ? null : 'Message is required';\n      return new _Promise(resolve => {\n        this.setState({\n          messageValid,\n          formErrors\n        }, () => {\n          resolve();\n        });\n      });\n    });\n\n    this.nameInput = React.createRef();\n    this.emailInput = React.createRef();\n    this.messageInput = React.createRef();\n    this.state = {\n      name: '',\n      email: '',\n      message: '',\n      formErrors: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      nameValid: true,\n      emailValid: true,\n      messageValid: true,\n      formValid: false\n    };\n  }\n\n  async validateForm() {\n    await this.validateName(this.state.name);\n    await this.validateEmail(this.state.email);\n    await this.validateMessage(this.state.message);\n    this.setState({\n      formValid: this.state.nameValid && this.state.emailValid && this.state.messageValid\n    });\n    return this.state;\n  }\n\n  hasError(valid) {\n    return valid ? '' : 'invalid';\n  }\n\n  removeErrorClasses() {\n    this.nameInput.current.classList.remove('invalid');\n    this.emailInput.current.classList.remove('invalid');\n    this.messageInput.current.classList.remove('invalid');\n  }\n\n  async onSubmit(e) {\n    const {\n      sendMessageRequest\n    } = this.props;\n    const {\n      email,\n      name,\n      message\n    } = this.state;\n    e.preventDefault();\n    await this.validateForm();\n    const userInfo = {\n      name: name,\n      email: email,\n      message: message\n    };\n\n    if (this.state.formValid) {\n      sendMessageRequest({\n        email,\n        name,\n        message\n      });\n    }\n\n    this.setState({\n      name: '',\n      email: '',\n      message: ''\n    });\n    console.log(userInfo);\n  }\n\n  render() {\n    return __jsx(\"form\", {\n      onSubmit: this.onSubmit.bind(this)\n    }, __jsx(\"div\", {\n      className: `input-field ${this.hasError(this.state.nameValid)}`,\n      ref: this.nameInput\n    }, __jsx(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      autoComplete: \"off\",\n      value: this.state.name,\n      onChange: event => this.handleInputChange({\n        name: event.target.value\n      }),\n      className: this.state.name ? 'has-data' : null\n    }), __jsx(\"label\", {\n      htmlFor: \"name\"\n    }, \"Name\"), __jsx(\"div\", {\n      className: \"error\"\n    }, this.state.formErrors.name ? this.state.formErrors.name : null)), __jsx(\"div\", {\n      className: `input-field ${this.hasError(this.state.nameValid)}`,\n      ref: this.emailInput\n    }, __jsx(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      id: \"email\",\n      autoComplete: \"off\",\n      value: this.state.email,\n      onChange: event => this.handleInputChange({\n        email: event.target.value\n      }),\n      className: this.state.email ? 'has-data' : null\n    }), __jsx(\"label\", {\n      htmlFor: \"email\"\n    }, \"E-Mail\"), __jsx(\"div\", {\n      className: \"error\"\n    }, this.state.formErrors.email ? this.state.formErrors.email : null)), __jsx(\"div\", {\n      className: `textarea-field ${this.hasError(this.state.nameValid)}`,\n      ref: this.messageInput\n    }, __jsx(\"textarea\", {\n      placeholder: \"Message...\",\n      name: \"message\",\n      value: this.state.message,\n      onChange: event => this.handleInputChange({\n        message: event.target.value\n      }),\n      className: this.state.message ? 'has-data' : null\n    }), __jsx(\"div\", {\n      className: \"error\"\n    }, this.state.formErrors.message ? this.state.formErrors.message : null)), __jsx(\"div\", {\n      className: \"submit-field\"\n    }, __jsx(\"button\", {\n      type: \"submit\"\n    }, \"Send\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  sendMessageRequest: message => {\n    dispatch(sendGetInTouchMessageRequest(message));\n  }\n});\n\nexport default connect(null, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/Users/volodymyr/Documents/oril-new-website/src/commons/Form/index.js"],"names":["React","Component","connect","sendGetInTouchMessageRequest","Form","constructor","props","state","formErrors","name","email","message","setState","removeErrorClasses","nameValid","length","resolve","emailValid","match","messageValid","nameInput","createRef","emailInput","messageInput","formValid","validateForm","validateName","validateEmail","validateMessage","hasError","valid","current","classList","remove","onSubmit","e","sendMessageRequest","preventDefault","userInfo","console","log","render","bind","event","handleInputChange","target","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport \"./index.scss\";\nimport { connect } from 'react-redux';\nimport { sendGetInTouchMessageRequest } from '../../actions/message';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.nameInput = React.createRef();\n        this.emailInput = React.createRef();\n        this.messageInput = React.createRef();\n\n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            formErrors: {name: '', email: '', message: ''},\n            nameValid: true,\n            emailValid: true,\n            messageValid: true,\n            formValid: false\n        };\n    }\n\n    handleInputChange = (state) => {\n        const formErrors = { name: '', email: '', message: ''};\n        this.setState({ ...state, formErrors});\n        this.removeErrorClasses();\n    };\n\n    validateName = (name) => {\n        let nameValid = name.length > 0;\n        let formErrors = { ...this.state.formErrors };\n        formErrors.name = nameValid ? null : 'Name is required';\n        return new Promise(resolve => {\n            this.setState({nameValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    validateEmail = (email) => {\n        let emailValid = email.length > 0;\n        const formErrors = { ...this.state.formErrors };\n        formErrors.email = emailValid ? null : 'Email is required';\n\n        if (!emailValid) {\n            return new Promise(resolve => {\n                this.setState({emailValid, formErrors}, () => {\n                    resolve();\n                });\n            });\n        }\n\n        emailValid = email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n        formErrors.email = emailValid ? null : 'Email is invalid';\n        return new Promise(resolve => {\n            this.setState({emailValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    validateMessage = (message) => {\n        const messageValid = message.length > 0;\n        const formErrors = { ...this.state.formErrors };\n        formErrors.message = messageValid ? null : 'Message is required';\n        return new Promise(resolve => {\n            this.setState({messageValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    async validateForm() {\n        await this.validateName(this.state.name);\n        await this.validateEmail(this.state.email);\n        await this.validateMessage(this.state.message);\n        this.setState({formValid: this.state.nameValid && this.state.emailValid && this.state.messageValid});\n        return this.state;\n    }\n\n    hasError(valid) {\n        return valid ? '' : 'invalid';\n    }\n\n    removeErrorClasses() {\n        this.nameInput.current.classList.remove('invalid');\n        this.emailInput.current.classList.remove('invalid');\n        this.messageInput.current.classList.remove('invalid');\n    }\n\n    async onSubmit(e) {\n\n        const {sendMessageRequest} = this.props;\n        const {email, name, message,} = this.state;\n\n        e.preventDefault();\n        await this.validateForm();\n\n        const userInfo = {\n          name: name,\n          email: email,\n          message: message\n        };\n\n        if (this.state.formValid) {\n            sendMessageRequest({\n                email,\n                name,\n                message,\n            });\n        }\n\n        this.setState({name: '', email: '', message: ''});\n        console.log(userInfo);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit.bind(this)}>\n                <div className={`input-field ${this.hasError(this.state.nameValid)}`} ref={this.nameInput}>\n                    <input type=\"text\"\n                           name=\"name\"\n                           id=\"name\"\n                           autoComplete=\"off\"\n                           value={this.state.name}\n                           onChange={(event) => this.handleInputChange({ name: event.target.value }) }\n                           className={this.state.name ? 'has-data' : null}/>\n                    <label htmlFor=\"name\">Name</label>\n                    <div className=\"error\">{this.state.formErrors.name ? this.state.formErrors.name : null}</div>\n                </div>\n                <div className={`input-field ${this.hasError(this.state.nameValid)}`} ref={this.emailInput}>\n                    <input type=\"text\"\n                           name=\"email\"\n                           id=\"email\"\n                           autoComplete=\"off\"\n                           value={this.state.email}\n                           onChange={(event) => this.handleInputChange({ email: event.target.value })}\n                           className={this.state.email ? 'has-data' : null}/>\n                    <label htmlFor=\"email\">E-Mail</label>\n                    <div className=\"error\">{this.state.formErrors.email ? this.state.formErrors.email : null}</div>\n                </div>\n                <div className={`textarea-field ${this.hasError(this.state.nameValid)}`} ref={this.messageInput}>\n                    <textarea placeholder=\"Message...\"\n                              name=\"message\"\n                              value={this.state.message}\n                              onChange={(event) => this.handleInputChange({ message: event.target.value })}\n                              className={this.state.message ? 'has-data' : null}>\n                    </textarea>\n                    <div className=\"error\">{this.state.formErrors.message ? this.state.formErrors.message : null}</div>\n                </div>\n                <div className=\"submit-field\">\n                    <button type=\"submit\">Send</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    sendMessageRequest: (message) => {\n        dispatch(sendGetInTouchMessageRequest(message));\n    }\n});\n\nexport default (connect(null, mapDispatchToProps)(Form));\n\n"]},"metadata":{},"sourceType":"module"}