{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport \"./index.scss\";\nimport { connect } from 'react-redux';\nimport { sendGetInTouchMessageRequest } from '../../actions/message';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (state) {\n      var formErrors = {\n        name: '',\n        email: '',\n        message: ''\n      };\n\n      _this.setState(_objectSpread({}, state, {\n        formErrors: formErrors\n      }));\n\n      _this.removeErrorClasses();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateName\", function (name) {\n      var nameValid = name.length > 0;\n\n      var formErrors = _objectSpread({}, _this.state.formErrors);\n\n      formErrors.name = nameValid ? null : 'Name is required';\n      return new _Promise(function (resolve) {\n        _this.setState({\n          nameValid: nameValid,\n          formErrors: formErrors\n        }, function () {\n          resolve();\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateEmail\", function (email) {\n      var emailValid = email.length > 0;\n\n      var formErrors = _objectSpread({}, _this.state.formErrors);\n\n      formErrors.email = emailValid ? null : 'Email is required';\n\n      if (!emailValid) {\n        return new _Promise(function (resolve) {\n          _this.setState({\n            emailValid: emailValid,\n            formErrors: formErrors\n          }, function () {\n            resolve();\n          });\n        });\n      }\n\n      emailValid = email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n      formErrors.email = emailValid ? null : 'Email is invalid';\n      return new _Promise(function (resolve) {\n        _this.setState({\n          emailValid: emailValid,\n          formErrors: formErrors\n        }, function () {\n          resolve();\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateMessage\", function (message) {\n      var messageValid = message.length > 0;\n\n      var formErrors = _objectSpread({}, _this.state.formErrors);\n\n      formErrors.message = messageValid ? null : 'Message is required';\n      return new _Promise(function (resolve) {\n        _this.setState({\n          messageValid: messageValid,\n          formErrors: formErrors\n        }, function () {\n          resolve();\n        });\n      });\n    });\n\n    _this.nameInput = React.createRef();\n    _this.emailInput = React.createRef();\n    _this.messageInput = React.createRef();\n    _this.state = {\n      name: '',\n      email: '',\n      message: '',\n      formErrors: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      nameValid: true,\n      emailValid: true,\n      messageValid: true,\n      formValid: false\n    };\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"validateForm\",\n    value: function () {\n      var _validateForm = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.validateName(this.state.name);\n\n              case 2:\n                _context.next = 4;\n                return this.validateEmail(this.state.email);\n\n              case 4:\n                _context.next = 6;\n                return this.validateMessage(this.state.message);\n\n              case 6:\n                this.setState({\n                  formValid: this.state.nameValid && this.state.emailValid && this.state.messageValid\n                });\n                return _context.abrupt(\"return\", this.state);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validateForm() {\n        return _validateForm.apply(this, arguments);\n      }\n\n      return validateForm;\n    }()\n  }, {\n    key: \"hasError\",\n    value: function hasError(valid) {\n      return valid ? '' : 'invalid';\n    }\n  }, {\n    key: \"removeErrorClasses\",\n    value: function removeErrorClasses() {\n      this.nameInput.current.classList.remove('invalid');\n      this.emailInput.current.classList.remove('invalid');\n      this.messageInput.current.classList.remove('invalid');\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function () {\n      var _onSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        var sendMessageRequest, _this$state, email, name, message, userInfo;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                sendMessageRequest = this.props.sendMessageRequest;\n                _this$state = this.state, email = _this$state.email, name = _this$state.name, message = _this$state.message;\n                e.preventDefault();\n                _context2.next = 5;\n                return this.validateForm();\n\n              case 5:\n                userInfo = {\n                  name: name,\n                  email: email,\n                  message: message\n                };\n\n                if (this.state.formValid) {\n                  sendMessageRequest({\n                    email: email,\n                    name: name,\n                    message: message\n                  });\n                }\n\n                this.setState({\n                  name: '',\n                  email: '',\n                  message: ''\n                });\n                console.log(userInfo);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onSubmit(_x) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"form\", {\n        onSubmit: this.onSubmit.bind(this)\n      }, __jsx(\"div\", {\n        className: \"input-field \".concat(this.hasError(this.state.nameValid)),\n        ref: this.nameInput\n      }, __jsx(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        autoComplete: \"off\",\n        value: this.state.name,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange({\n            name: event.target.value\n          });\n        },\n        className: this.state.name ? 'has-data' : null\n      }), __jsx(\"label\", {\n        htmlFor: \"name\"\n      }, \"Name\"), __jsx(\"div\", {\n        className: \"error\"\n      }, this.state.formErrors.name ? this.state.formErrors.name : null)), __jsx(\"div\", {\n        className: \"input-field \".concat(this.hasError(this.state.nameValid)),\n        ref: this.emailInput\n      }, __jsx(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        id: \"email\",\n        autoComplete: \"off\",\n        value: this.state.email,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange({\n            email: event.target.value\n          });\n        },\n        className: this.state.email ? 'has-data' : null\n      }), __jsx(\"label\", {\n        htmlFor: \"email\"\n      }, \"E-Mail\"), __jsx(\"div\", {\n        className: \"error\"\n      }, this.state.formErrors.email ? this.state.formErrors.email : null)), __jsx(\"div\", {\n        className: \"textarea-field \".concat(this.hasError(this.state.nameValid)),\n        ref: this.messageInput\n      }, __jsx(\"textarea\", {\n        placeholder: \"Message...\",\n        name: \"message\",\n        value: this.state.message,\n        onChange: function onChange(event) {\n          return _this2.handleInputChange({\n            message: event.target.value\n          });\n        },\n        className: this.state.message ? 'has-data' : null\n      }), __jsx(\"div\", {\n        className: \"error\"\n      }, this.state.formErrors.message ? this.state.formErrors.message : null)), __jsx(\"div\", {\n        className: \"submit-field\"\n      }, __jsx(\"button\", {\n        type: \"submit\"\n      }, \"Send\")));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    sendMessageRequest: function sendMessageRequest(message) {\n      dispatch(sendGetInTouchMessageRequest(message));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/Users/volodymyr/Documents/oril-new-website/src/commons/Form/index.js"],"names":["React","Component","connect","sendGetInTouchMessageRequest","Form","props","state","formErrors","name","email","message","setState","removeErrorClasses","nameValid","length","resolve","emailValid","match","messageValid","nameInput","createRef","emailInput","messageInput","formValid","validateName","validateEmail","validateMessage","valid","current","classList","remove","e","sendMessageRequest","preventDefault","validateForm","userInfo","console","log","onSubmit","bind","hasError","event","handleInputChange","target","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport \"./index.scss\";\nimport { connect } from 'react-redux';\nimport { sendGetInTouchMessageRequest } from '../../actions/message';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.nameInput = React.createRef();\n        this.emailInput = React.createRef();\n        this.messageInput = React.createRef();\n\n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            formErrors: {name: '', email: '', message: ''},\n            nameValid: true,\n            emailValid: true,\n            messageValid: true,\n            formValid: false\n        };\n    }\n\n    handleInputChange = (state) => {\n        const formErrors = { name: '', email: '', message: ''};\n        this.setState({ ...state, formErrors});\n        this.removeErrorClasses();\n    };\n\n    validateName = (name) => {\n        let nameValid = name.length > 0;\n        let formErrors = { ...this.state.formErrors };\n        formErrors.name = nameValid ? null : 'Name is required';\n        return new Promise(resolve => {\n            this.setState({nameValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    validateEmail = (email) => {\n        let emailValid = email.length > 0;\n        const formErrors = { ...this.state.formErrors };\n        formErrors.email = emailValid ? null : 'Email is required';\n\n        if (!emailValid) {\n            return new Promise(resolve => {\n                this.setState({emailValid, formErrors}, () => {\n                    resolve();\n                });\n            });\n        }\n\n        emailValid = email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n        formErrors.email = emailValid ? null : 'Email is invalid';\n        return new Promise(resolve => {\n            this.setState({emailValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    validateMessage = (message) => {\n        const messageValid = message.length > 0;\n        const formErrors = { ...this.state.formErrors };\n        formErrors.message = messageValid ? null : 'Message is required';\n        return new Promise(resolve => {\n            this.setState({messageValid, formErrors}, () => {\n                resolve();\n            });\n        });\n    };\n\n    async validateForm() {\n        await this.validateName(this.state.name);\n        await this.validateEmail(this.state.email);\n        await this.validateMessage(this.state.message);\n        this.setState({formValid: this.state.nameValid && this.state.emailValid && this.state.messageValid});\n        return this.state;\n    }\n\n    hasError(valid) {\n        return valid ? '' : 'invalid';\n    }\n\n    removeErrorClasses() {\n        this.nameInput.current.classList.remove('invalid');\n        this.emailInput.current.classList.remove('invalid');\n        this.messageInput.current.classList.remove('invalid');\n    }\n\n    async onSubmit(e) {\n\n        const {sendMessageRequest} = this.props;\n        const {email, name, message,} = this.state;\n\n        e.preventDefault();\n        await this.validateForm();\n\n        const userInfo = {\n          name: name,\n          email: email,\n          message: message\n        };\n\n        if (this.state.formValid) {\n            sendMessageRequest({\n                email,\n                name,\n                message,\n            });\n        }\n\n        this.setState({name: '', email: '', message: ''});\n        console.log(userInfo);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit.bind(this)}>\n                <div className={`input-field ${this.hasError(this.state.nameValid)}`} ref={this.nameInput}>\n                    <input type=\"text\"\n                           name=\"name\"\n                           id=\"name\"\n                           autoComplete=\"off\"\n                           value={this.state.name}\n                           onChange={(event) => this.handleInputChange({ name: event.target.value }) }\n                           className={this.state.name ? 'has-data' : null}/>\n                    <label htmlFor=\"name\">Name</label>\n                    <div className=\"error\">{this.state.formErrors.name ? this.state.formErrors.name : null}</div>\n                </div>\n                <div className={`input-field ${this.hasError(this.state.nameValid)}`} ref={this.emailInput}>\n                    <input type=\"text\"\n                           name=\"email\"\n                           id=\"email\"\n                           autoComplete=\"off\"\n                           value={this.state.email}\n                           onChange={(event) => this.handleInputChange({ email: event.target.value })}\n                           className={this.state.email ? 'has-data' : null}/>\n                    <label htmlFor=\"email\">E-Mail</label>\n                    <div className=\"error\">{this.state.formErrors.email ? this.state.formErrors.email : null}</div>\n                </div>\n                <div className={`textarea-field ${this.hasError(this.state.nameValid)}`} ref={this.messageInput}>\n                    <textarea placeholder=\"Message...\"\n                              name=\"message\"\n                              value={this.state.message}\n                              onChange={(event) => this.handleInputChange({ message: event.target.value })}\n                              className={this.state.message ? 'has-data' : null}>\n                    </textarea>\n                    <div className=\"error\">{this.state.formErrors.message ? this.state.formErrors.message : null}</div>\n                </div>\n                <div className=\"submit-field\">\n                    <button type=\"submit\">Send</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    sendMessageRequest: (message) => {\n        dispatch(sendGetInTouchMessageRequest(message));\n    }\n});\n\nexport default (connect(null, mapDispatchToProps)(Form));\n\n"]},"metadata":{},"sourceType":"module"}