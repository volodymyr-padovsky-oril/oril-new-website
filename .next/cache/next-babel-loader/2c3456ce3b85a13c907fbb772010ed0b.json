{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { parse } from \"query-string\";\nimport { later } from \"../utils/main\";\nimport { scrollTo } from \"../utils/scroll\";\nimport \"react-tabs/style/react-tabs.css\";\nimport \"./index.scss\";\n\nconst CustomTab = ({\n  children,\n  activeClassName\n}) => __jsx(Tab, {\n  className: `react-tabs__tab ${activeClassName}`\n}, __jsx(\"div\", null, __jsx(\"div\", null, children)));\n\nCustomTab.tabsRole = 'Tab';\nexport class BaseTabs extends Component {\n  constructor(props) {\n    super(props);\n    this.startIndex = props.startIndex || 0;\n    this.state = {\n      activeTab: 0,\n      show: true\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n    this.setState({\n      activeTab: this.startIndex\n    });\n    this.tabsContainer = document.querySelector('.react-tabs');\n    this.tabList = document.querySelector('.react-tabs__tab-list');\n    this.tabs = document.querySelectorAll('.react-tabs__tab');\n    this.div = document.createElement('div');\n    this.div.classList.add('sub-template');\n    const query = parse(window.location.search);\n    const tabIndex = this.props.tabs.findIndex(tab => tab.id === query.activeTab);\n\n    if (tabIndex !== -1) {\n      this.handleSelect(tabIndex);\n    }\n\n    later().then(() => this.setActiveTabBorders());\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll() {\n    const offsetTop = window.innerWidth < 768 ? 0 : 20;\n\n    if (this.tabsContainer) {\n      const template = document.querySelector('.sub-template');\n      const condition = Math.floor(this.tabsContainer.getBoundingClientRect().top > offsetTop);\n\n      if (condition) {\n        if (template) {\n          this.tabList.parentNode.removeChild(template);\n        }\n      } else {\n        if (!(typeof template != 'undefined' && template != null)) {\n          this.tabList.parentNode.insertBefore(this.div, this.tabList.nextSibling);\n        }\n      }\n\n      this.setState({\n        show: condition\n      });\n    }\n  }\n\n  setActiveTabBorders() {\n    const selectedTab = document.querySelector('.react-tabs__tab--selected');\n    const tabsCount = this.tabs.length;\n    const activeClass = 'react-tabs__tab--active';\n    let selectedTabIndex = 0;\n\n    for (let i = 0; i < this.tabs.length; i++) {\n      this.tabs[i].classList.remove(activeClass);\n\n      if (this.tabs[i] === selectedTab) {\n        selectedTabIndex = i;\n      }\n    }\n\n    switch (selectedTabIndex) {\n      case 0:\n        this.tabs[0].classList.add(activeClass);\n        break;\n\n      case tabsCount:\n        this.tabs[tabsCount].classList.add(activeClass);\n        break;\n\n      default:\n        selectedTab.classList.add(activeClass);\n        selectedTab.previousElementSibling.classList.add(activeClass);\n        break;\n    }\n  }\n\n  handleSelect(index) {\n    this.setState({\n      activeTab: index\n    });\n    this.props.history.push({\n      pathname: `/${this.props.pathname}`,\n      search: `?activeTab=${this.props.tabs[index].id}`\n    });\n    later().then(() => this.setActiveTabBorders());\n    let selector = '#development';\n\n    switch (this.props.pathname) {\n      case 'services':\n        selector = '#development';\n        break;\n\n      case 'portfolio':\n        selector = '#products';\n        break;\n\n      default:\n        break;\n    }\n\n    if (document.querySelector(selector)) {\n      scrollTo(selector);\n    }\n  }\n\n  render() {\n    return __jsx(Tabs, {\n      onSelect: this.handleSelect,\n      selectedIndex: this.state.activeTab\n    }, __jsx(TabList, {\n      className: `react-tabs__tab-list ${this.state.show ? '' : 'sticky'}`\n    }, this.props.tabs.map((tab, index) => __jsx(CustomTab, {\n      activeClassName: this.state.activeTab === index ? 'react-tabs__tab--selected' : '',\n      key: index\n    }, tab.title))), this.props.tabs.map((tab, index) => __jsx(TabPanel, {\n      key: index\n    }, tab.component())));\n  }\n\n}\nexport default withRouter(BaseTabs);","map":{"version":3,"sources":["/Users/volodymyr/Documents/oril-new-website/src/commons/BaseTabs/index.js"],"names":["React","Component","withRouter","Tab","Tabs","TabList","TabPanel","parse","later","scrollTo","CustomTab","children","activeClassName","tabsRole","BaseTabs","constructor","props","startIndex","state","activeTab","show","handleSelect","bind","handleScroll","componentDidMount","window","addEventListener","setState","tabsContainer","document","querySelector","tabList","tabs","querySelectorAll","div","createElement","classList","add","query","location","search","tabIndex","findIndex","tab","id","then","setActiveTabBorders","componentWillUnmount","removeEventListener","offsetTop","innerWidth","template","condition","Math","floor","getBoundingClientRect","top","parentNode","removeChild","insertBefore","nextSibling","selectedTab","tabsCount","length","activeClass","selectedTabIndex","i","remove","previousElementSibling","index","history","push","pathname","selector","render","map","title","component"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport {Tab, Tabs, TabList, TabPanel} from \"react-tabs\";\nimport {parse} from \"query-string\";\nimport {later} from \"../utils/main\";\nimport {scrollTo} from \"../utils/scroll\";\n\nimport \"react-tabs/style/react-tabs.css\";\nimport \"./index.scss\";\n\nconst CustomTab = ({ children, activeClassName }) => (\n    <Tab className={`react-tabs__tab ${activeClassName}`}>\n        <div>\n            <div>\n                {children}\n            </div>\n        </div>\n    </Tab>\n);\n\nCustomTab.tabsRole = 'Tab';\n\nexport class BaseTabs extends Component {\n    constructor(props) {\n        super(props);\n        this.startIndex = props.startIndex || 0;\n        this.state = { activeTab: 0, show: true };\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n        this.setState({activeTab: this.startIndex});\n        this.tabsContainer = document.querySelector('.react-tabs');\n        this.tabList = document.querySelector('.react-tabs__tab-list');\n        this.tabs = document.querySelectorAll('.react-tabs__tab');\n        this.div = document.createElement('div');\n        this.div.classList.add('sub-template');\n        const query = parse(window.location.search);\n        const tabIndex = this.props.tabs.findIndex(tab => tab.id === query.activeTab);\n\n        if (tabIndex !== -1) {\n            this.handleSelect(tabIndex);\n        }\n\n        later().then(() => this.setActiveTabBorders());\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll() {\n        const offsetTop = window.innerWidth < 768 ? 0 : 20;\n\n        if (this.tabsContainer) {\n            const template = document.querySelector('.sub-template');\n            const condition = Math.floor(this.tabsContainer.getBoundingClientRect().top > offsetTop);\n\n            if (condition) {\n                if (template) {\n                    this.tabList.parentNode.removeChild(template);\n                }\n            } else {\n                if (!(typeof(template) != 'undefined' && template != null)) {\n                    this.tabList.parentNode.insertBefore(this.div, this.tabList.nextSibling);\n                }\n            }\n\n            this.setState({\n                show: condition\n            });\n        }\n    }\n\n    setActiveTabBorders() {\n        const selectedTab = document.querySelector('.react-tabs__tab--selected');\n        const tabsCount = this.tabs.length;\n        const activeClass = 'react-tabs__tab--active';\n        let selectedTabIndex = 0;\n\n        for (let i = 0; i < this.tabs.length; i++) {\n            this.tabs[i].classList.remove(activeClass);\n            if (this.tabs[i] === selectedTab) {\n                selectedTabIndex = i;\n            }\n        }\n\n        switch (selectedTabIndex) {\n            case 0:\n                this.tabs[0].classList.add(activeClass);\n                break;\n            case tabsCount:\n                this.tabs[tabsCount].classList.add(activeClass);\n                break;\n            default:\n                selectedTab.classList.add(activeClass);\n                selectedTab.previousElementSibling.classList.add(activeClass);\n                break;\n        }\n    }\n\n    handleSelect(index) {\n        this.setState({ activeTab: index });\n        this.props.history.push({\n            pathname: `/${this.props.pathname}`,\n            search: `?activeTab=${this.props.tabs[index].id}`\n        });\n\n        later().then(() => this.setActiveTabBorders());\n        let selector = '#development';\n\n        switch (this.props.pathname) {\n            case 'services':\n                selector = '#development';\n                break;\n            case 'portfolio':\n                selector = '#products';\n                break;\n            default:\n                break;\n        }\n\n        if (document.querySelector(selector)) {\n            scrollTo(selector);\n        }\n    }\n\n    render() {\n        return (\n            <Tabs onSelect={this.handleSelect} selectedIndex={this.state.activeTab}>\n                <TabList className={`react-tabs__tab-list ${this.state.show ? '' : 'sticky'}`}>\n                    {\n                        this.props.tabs.map((tab, index) => (\n                            <CustomTab activeClassName={this.state.activeTab === index ? 'react-tabs__tab--selected' : ''} key={index}>\n                                {tab.title}\n                            </CustomTab>)\n                        )\n                    }\n                </TabList>\n                {\n                    this.props.tabs.map((tab, index) => (<TabPanel key={index}>{tab.component()}</TabPanel>))\n                }\n            </Tabs>\n        );\n    }\n}\n\nexport default withRouter(BaseTabs);\n"]},"metadata":{},"sourceType":"module"}